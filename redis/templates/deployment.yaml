apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "redis.fullname" . }}
  labels:
    {{- include "redis.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "redis.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "redis.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "redis.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
          - "redis-server"
          - "--requirepass"
          - "${REDIS_PASSWORD}"
          env:
            {{- if .Values.vault.enabled }}
            - name: REDISCLI_AUTH
              valueFrom:
                secretKeyRef:
                  name: dbpass
                  key: REDISCLI_AUTH
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: dbpass
                  key: REDIS_PASSWORD
            {{- else }}
            - name: REDISCLI_AUTH
              value: redis
            - name: REDIS_PASSWORD
              value: redis
            {{- end }}
          volumeMounts:
            - name: {{ .Values.volume.redis.claimName }}
              mountPath: {{ .Values.volume.redis.mountPath }}
          {{- if .Values.vault.enabled }}
            - name: secrets-store-inline
              mountPath: "/mnt/secrets-store"
              readOnly: true
          {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          readinessProbe:
            exec:
              command: [ "redis-cli", "ping"]
            initialDelaySeconds: 5
            periodSeconds: 10
          livenessProbe:
            exec:
              command: [ "redis-cli", "ping"]
            initialDelaySeconds: 15
            periodSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- if .Values.pvc.enabled }}
      volumes:
        - name: {{ .Values.volume.redis.volumeName}}
          persistentVolumeClaim:
            claimName: {{ .Values.volume.redis.claimName }}
      {{- else }}
      volumes:
        - name: {{ .Values.volume.redis.volumeName}}
          hostPath:
            path: "{{ .Values.volume.redis.volumePath }}/{{ .Values.volume.redis.volumeName}}-{{ .Release.Namespace }}"
            type: {{ .Values.volume.redis.volumeType }}
      {{- end }}
      {{- if .Values.vault.enabled }}
        - name: secrets-store-inline
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "vault-database"
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
